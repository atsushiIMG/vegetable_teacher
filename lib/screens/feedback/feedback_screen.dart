import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../core/themes/app_colors.dart';
import '../../core/themes/app_text_styles.dart';
import '../../widgets/vegetable_icon.dart';
import '../../services/feedback_service.dart';

enum SoilCondition {
  dry('„Ç´„É©„Ç´„É©', 'üíß', 'Ê∞¥„ÇÑ„Çä„ÅåÂøÖË¶Å„Åß„Åô'),
  moist('Â∞ë„ÅóÊπø„Å£„Å¶„Çã', '‚ú®', 'ËâØ„ÅÑÁä∂ÊÖã„Åß„Åô'),
  wet('ÂçÅÂàÜÊπø„Å£„Å¶„Çã', 'üí¶', '„Åó„Å∞„Çâ„ÅèÊßòÂ≠êË¶ã„Åß');

  const SoilCondition(this.displayName, this.emoji, this.description);
  final String displayName;
  final String emoji;
  final String description;
}

class FeedbackScreen extends StatefulWidget {
  final String notificationId;
  final String vegetableName;
  final String userVegetableId;

  const FeedbackScreen({
    super.key,
    required this.notificationId,
    required this.vegetableName,
    required this.userVegetableId,
  });

  @override
  State<FeedbackScreen> createState() => _FeedbackScreenState();
}

class _FeedbackScreenState extends State<FeedbackScreen> {
  SoilCondition? _selectedCondition;
  final TextEditingController _commentController = TextEditingController();
  final FeedbackService _feedbackService = FeedbackService();
  bool _isSubmitting = false;

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Âúü„ÅÆÁä∂ÊÖã„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ'),
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // ÈáéËèúÊÉÖÂ†±„Éò„ÉÉ„ÉÄ„Éº
            _buildVegetableHeader(),
            const SizedBox(height: 32),
            
            // Âúü„ÅÆÁä∂ÊÖãÈÅ∏Êäû
            _buildSoilConditionSelector(),
            const SizedBox(height: 32),
            
            // „Ç≥„É°„É≥„ÉàÂÖ•ÂäõÊ¨Ñ
            _buildCommentInput(),
            const SizedBox(height: 40),
            
            // ÈÄÅ‰ø°„Éú„Çø„É≥
            _buildSubmitButton(),
            const SizedBox(height: 16),
            
            // Ë™¨Êòé„ÉÜ„Ç≠„Çπ„Éà
            _buildHelpText(),
          ],
        ),
      ),
    );
  }

  Widget _buildVegetableHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: AppColors.primary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: AppColors.primary.withOpacity(0.2)),
      ),
      child: Column(
        children: [
          VegetableIcon(
            vegetableName: widget.vegetableName,
            size: 60,
            backgroundColor: AppColors.primary.withOpacity(0.2),
          ),
          const SizedBox(height: 12),
          Text(
            widget.vegetableName,
            style: AppTextStyles.headline2.copyWith(
              color: AppColors.primary,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            'Ê∞¥„ÇÑ„ÇäÂæå„ÅÆÂúü„ÅÆÁä∂ÊÖã„ÅØ„ÅÑ„Åã„Åå„Åß„Åô„ÅãÔºü',
            style: AppTextStyles.body1.copyWith(
              color: Colors.grey[700],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildSoilConditionSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 16),
          child: Text(
            'Âúü„ÅÆÁä∂ÊÖã„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
            style: AppTextStyles.headline3.copyWith(
              color: AppColors.onSurface,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        ...SoilCondition.values.map((condition) => _buildConditionCard(condition)),
      ],
    );
  }

  Widget _buildConditionCard(SoilCondition condition) {
    final isSelected = _selectedCondition == condition;
    
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () {
          setState(() {
            _selectedCondition = condition;
          });
        },
        borderRadius: BorderRadius.circular(16),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: isSelected 
                ? AppColors.primary.withOpacity(0.1) 
                : Colors.white,
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: isSelected 
                  ? AppColors.primary 
                  : Colors.grey[300]!,
              width: isSelected ? 2 : 1,
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 4,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Row(
            children: [
              // ÁµµÊñáÂ≠ó„Ç¢„Ç§„Ç≥„É≥
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: isSelected 
                      ? AppColors.primary.withOpacity(0.2)
                      : Colors.grey[100],
                  borderRadius: BorderRadius.circular(24),
                ),
                child: Center(
                  child: Text(
                    condition.emoji,
                    style: const TextStyle(fontSize: 24),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              
              // „ÉÜ„Ç≠„Çπ„ÉàÊÉÖÂ†±
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      condition.displayName,
                      style: AppTextStyles.body1.copyWith(
                        fontWeight: FontWeight.w600,
                        color: isSelected ? AppColors.primary : AppColors.onSurface,
                      ),
                    ),
                    const SizedBox(height: 2),
                    Text(
                      condition.description,
                      style: AppTextStyles.caption.copyWith(
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ),
              
              // ÈÅ∏Êäû„Éû„Éº„ÇØ
              if (isSelected)
                Icon(
                  Icons.check_circle,
                  color: AppColors.primary,
                  size: 24,
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildCommentInput() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(bottom: 8),
          child: Text(
            '„Ç≥„É°„É≥„ÉàÔºà‰ªªÊÑèÔºâ',
            style: AppTextStyles.body1.copyWith(
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey[300]!),
          ),
          child: TextField(
            controller: _commentController,
            maxLines: 3,
            maxLength: 100,
            decoration: InputDecoration(
              hintText: 'ÈáéËèú„ÅÆÊßòÂ≠ê„ÇÑÊ∞ó„Å´„Å™„Çã„Åì„Å®„Åå„ÅÇ„Çå„Å∞...',
              hintStyle: AppTextStyles.body1.copyWith(
                color: Colors.grey[500],
              ),
              border: InputBorder.none,
              contentPadding: const EdgeInsets.all(16),
              counterStyle: AppTextStyles.caption.copyWith(
                color: Colors.grey[500],
              ),
            ),
            style: AppTextStyles.body1,
          ),
        ),
      ],
    );
  }

  Widget _buildSubmitButton() {
    final canSubmit = _selectedCondition != null && !_isSubmitting;
    
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: canSubmit ? _submitFeedback : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.primary,
          foregroundColor: Colors.white,
          disabledBackgroundColor: Colors.grey[300],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          elevation: 0,
        ),
        child: _isSubmitting
            ? const SizedBox(
                width: 24,
                height: 24,
                child: CircularProgressIndicator(
                  color: Colors.white,
                  strokeWidth: 2,
                ),
              )
            : Text(
                '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÈÄÅ‰ø°',
                style: AppTextStyles.button.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
      ),
    );
  }

  Widget _buildHelpText() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: AppColors.secondary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Icon(
            Icons.lightbulb_outline,
            color: AppColors.secondary,
            size: 20,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              '„ÅÇ„Å™„Åü„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÅßÊ¨°Âõû„ÅÆÊ∞¥„ÇÑ„Çä„Çø„Ç§„Éü„É≥„Ç∞„ÅåË™øÊï¥„Åï„Çå„Åæ„Åô',
              style: AppTextStyles.caption.copyWith(
                color: Colors.grey[700],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _submitFeedback() async {
    if (_selectedCondition == null) return;

    setState(() {
      _isSubmitting = true;
    });

    try {
      await _feedbackService.submitFeedback(
        notificationId: widget.notificationId,
        userVegetableId: widget.userVegetableId,
        soilCondition: _selectedCondition!.displayName,
        comment: _commentController.text.trim(),
      );

      if (mounted) {
        // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.white),
                const SizedBox(width: 8),
                Text(
                  '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„ÅüÔºÅ',
                  style: AppTextStyles.body1.copyWith(color: Colors.white),
                ),
              ],
            ),
            backgroundColor: AppColors.success,
            duration: const Duration(seconds: 2),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        );

        // Â∞ë„ÅóÈÅÖÂª∂„Åó„Å¶„Åã„ÇâÁîªÈù¢„ÇíÈñâ„Åò„Çã
        await Future.delayed(const Duration(milliseconds: 500));
        
        if (mounted) {
          context.pop();
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error_outline, color: Colors.white),
                const SizedBox(width: 8),
                Text(
                  '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
                  style: AppTextStyles.body1.copyWith(color: Colors.white),
                ),
              ],
            ),
            backgroundColor: AppColors.error,
            duration: const Duration(seconds: 3),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isSubmitting = false;
        });
      }
    }
  }
}